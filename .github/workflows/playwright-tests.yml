# 🎭 Playwright Test Automation Pipeline
name: Playwright Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run full regression tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - full
          - performance
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      browser:
        description: 'Browser(s) to test'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all

# Permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_VERSION: '1.40.0'
  HEADLESS: 'true'

jobs:
  # 🔍 Pre-flight checks
  validate:
    name: Pre-flight Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_run_tests: ${{ steps.should-run.outputs.should_run }}
      test_suite: ${{ steps.determine-suite.outputs.suite }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for test-relevant changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            tests:
              - 'src/**'
              - 'tests/**'
              - 'features/**'
              - 'package*.json'
              - 'playwright.config.ts'
              - 'cucumber.config.js'

      - name: Determine if tests should run
        id: should-run
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "🎯 Main branch - tests will always run"
          elif [[ "${{ steps.changes.outputs.tests }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "✅ Test-relevant changes detected"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "⏭️ No test-relevant changes - skipping tests"
          fi
              
      - name: Determine test suite
        id: determine-suite
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "suite=full" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "suite=regression" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "suite=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          else
            echo "suite=smoke" >> $GITHUB_OUTPUT
          fi
          
      - name: Lint and type check
        run: |
          npm ci
          npm run lint
        continue-on-error: true
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

  # ⚡ Fast feedback - Smoke tests
  smoke-tests:
    name: Smoke Tests
    runs-on: windows-latest
    timeout-minutes: 10
    needs: validate
    if: needs.validate.outputs.should_run_tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Setup environment
        run: |
          cp .env.example .env
          echo "HEADLESS=true" >> .env
          echo "CI=true" >> .env
          echo "MAX_WORKERS=2" >> .env
          
      - name: Run smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: ${{ secrets.STAGING_BASE_URL || 'https://your-app-url.com' }}
          TEST_USER_USERNAME: ${{ secrets.TEST_USER_USERNAME }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        
          REGULAR_USER_USERNAME: ${{ secrets.REGULAR_USER_USERNAME }}
          REGULAR_USER_PASSWORD: ${{ secrets.REGULAR_USER_PASSWORD }}


      - name: Generate HTML Report
        if: always()
        run: |
          echo "📊 Generating HTML report..."
          if [ -d "reports/html-report" ]; then
            echo "✅ HTML report directory exists"
            ls -la reports/html-report/ || echo "Directory is empty"
          else
            echo "❌ HTML report directory not found"
            mkdir -p reports/html-report
          fi
          
      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-results
          path: |
            test-results/
            allure-results/
            reports/
          retention-days: 7

  # 🧪 Comprehensive testing - Regression tests
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate, smoke-tests]
    if: |
      needs.validate.outputs.should_run_tests == 'true' && 
      (needs.validate.outputs.test_suite == 'regression' || 
       needs.validate.outputs.test_suite == 'full' ||
       github.event_name == 'pull_request' ||
       needs.smoke-tests.result != 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Setup environment
        run: |
          cp .env.example .env
          echo "HEADLESS=true" >> .env
          echo "CI=true" >> .env
          echo "MAX_WORKERS=2" >> .env
          
      - name: Run regression tests
        run: npm run test:regression
        env:
          BASE_URL: ${{ secrets.STAGING_BASE_URL || 'https://your-app-url.com' }}
          TEST_USER_USERNAME: ${{ secrets.TEST_USER_USERNAME }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          REGULAR_USER_USERNAME: ${{ secrets.REGULAR_USER_USERNAME }}
          REGULAR_USER_PASSWORD: ${{ secrets.REGULAR_USER_PASSWORD }}

      - name: Upload regression test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-results
          path: |
            test-results/
            allure-results/
            reports/
          retention-days: 30

  # 📊 Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [validate, smoke-tests]
    if: |
      needs.validate.outputs.should_run_tests == 'true' && 
      (needs.validate.outputs.test_suite == 'performance' || 
       needs.validate.outputs.test_suite == 'full' ||
       github.event_name == 'schedule')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Setup environment
        run: |
          cp .env.example .env
          echo "HEADLESS=true" >> .env
          echo "CI=true" >> .env
          
      - name: Run performance tests
        run: npm run test:extended -- --grep="@performance"
        env:
          BASE_URL: ${{ secrets.STAGING_BASE_URL || 'https://your-app-url.com' }}
          TEST_USER_USERNAME: ${{ secrets.TEST_USER_USERNAME }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          REGULAR_USER_USERNAME: ${{ secrets.REGULAR_USER_USERNAME }}
          REGULAR_USER_PASSWORD: ${{ secrets.REGULAR_USER_PASSWORD }}

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            test-results/
            allure-results/
            reports/
          retention-days: 30

  # 📈 Generate and publish reports
  publish-reports:
    name: Publish Test Reports
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, performance-tests]
    if: always() && (needs.smoke-tests.result != 'skipped' || needs.regression-tests.result != 'skipped')
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Install Allure
        run: npm install -g allure-commandline
        
      - name: Merge all Allure results
        run: |
          # Clean any existing results to prevent old data
          rm -rf merged-results allure-report
          mkdir -p merged-results
          
          echo "📋 Collecting Allure results from artifacts..."
          find artifacts/ -name "allure-results" -type d | while read dir; do
            if [ -d "$dir" ] && [ "$(ls -A "$dir")" ]; then
              echo "✅ Found results in: $dir"
              cp -r "$dir"/* merged-results/ 2>/dev/null || true
            fi
          done
          
          # Also check for allure-results in root (from BDD tests)
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            echo "✅ Found results in root allure-results"
            cp -r allure-results/* merged-results/ 2>/dev/null || true
          fi
          
          echo "📊 Total result files found: $(ls merged-results/ | wc -l)"
          ls -la merged-results/ || echo "No results found"
          
      - name: Generate Allure report
        run: |
          if [ "$(ls -A merged-results/)" ]; then
            echo "🎭 Generating Allure report with $(ls merged-results/ | wc -l) result files..."
            allure generate merged-results --clean -o allure-report
            echo "✅ Allure report generated successfully"
            
            # Copy all test artifacts (screenshots, videos) to allure report directory
            echo "📸 Copying test artifacts for GitHub Pages..."
            mkdir -p allure-report/test-results
            find artifacts/ -name "test-results" -type d | while read dir; do
              if [ -d "$dir" ] && [ "$(ls -A "$dir")" ]; then
                echo "✅ Copying artifacts from: $dir"
                cp -r "$dir"/* allure-report/test-results/ 2>/dev/null || true
              fi
            done
            
            # Also copy any test-results from root
            if [ -d "test-results" ] && [ "$(ls -A test-results)" ]; then
              echo "✅ Copying root test-results"
              cp -r test-results/* allure-report/test-results/ 2>/dev/null || true
            fi
            
            echo "📊 Artifacts copied to allure-report/test-results/"
            ls -la allure-report/
            ls -la allure-report/test-results/ 2>/dev/null || echo "No test-results directory"
            
            # Fix any absolute paths in Allure report for GitHub Pages
            echo "🔧 Fixing paths for GitHub Pages deployment..."
            find allure-report -name "*.html" -type f -exec sed -i 's|file:///home/runner/work/[^/]*/[^/]*/|./|g' {} \; 2>/dev/null || true
            find allure-report -name "*.js" -type f -exec sed -i 's|file:///home/runner/work/[^/]*/[^/]*/|./|g' {} \; 2>/dev/null || true
            echo "✅ Path fixing completed"
          else
            echo "⚠️ No test results found - creating empty report"
            mkdir -p allure-report
            echo '<html><body><h1>No Test Results Found</h1><p>No test data available for this build.</p></body></html>' > allure-report/index.html
          fi
          
      - name: Create test summary
        run: |
          echo "# 📊 Test Execution Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "**Build**: ${{ github.run_number }}" >> test-summary.md
          echo "**Commit**: ${{ github.sha }}" >> test-summary.md
          echo "**Branch**: ${{ github.ref_name }}" >> test-summary.md
          echo "**Trigger**: ${{ github.event_name }}" >> test-summary.md
          echo "" >> test-summary.md
          
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "✅ **Smoke Tests**: Passed" >> test-summary.md
          else
            echo "❌ **Smoke Tests**: Failed" >> test-summary.md
          fi
          
          if [ "${{ needs.regression-tests.result }}" == "success" ]; then
            echo "✅ **Regression Tests**: Passed" >> test-summary.md
          elif [ "${{ needs.regression-tests.result }}" == "skipped" ]; then
            echo "⏭️ **Regression Tests**: Skipped" >> test-summary.md
          else
            echo "❌ **Regression Tests**: Failed" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "📈 [View Detailed Report](https://dmgithb.github.io/QA_BTL_Automation_Playwright/)" >> test-summary.md
          
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4
        if: github.ref == 'refs/heads/main'
        
      - name: Upload report to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: ./allure-report
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: github.ref == 'refs/heads/main'

  # 🔔 Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, performance-tests, publish-reports]
    if: always()
    
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.smoke-tests.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Critical smoke tests failed!" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.regression-tests.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=⚠️ Regression tests failed!" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.performance-tests.result }}" == "failure" ]]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=📊 Performance tests failed!" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All tests passed!" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { status, message } = ${{ toJson(steps.status.outputs) }};
            const body = `
            ## 🎭 Playwright Test Results
            
            ${message}
            
            **Build**: ${{ github.run_number }}
            **Commit**: ${{ github.sha }}
            
            ### Test Results Summary:
            - **Smoke Tests**: ${{ needs.smoke-tests.result }}
            - **Regression Tests**: ${{ needs.regression-tests.result }}
            - **Performance Tests**: ${{ needs.performance-tests.result }}
            
            📊 [View Detailed Report](https://dmgithb.github.io/QA_BTL_Automation_Playwright/)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Check Teams Webhook
        id: check-webhook
        run: |
          if [ -n "${{ secrets.TEAMS_WEBHOOK }}" ]; then
            echo "webhook_available=true" >> $GITHUB_OUTPUT
          else
            echo "webhook_available=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Teams webhook not configured - skipping notification"
          fi

      - name: Send Teams Notification
        if: always() && steps.check-webhook.outputs.webhook_available == 'true'
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK }}
          title: "🎭 Playwright Test Results"
          summary: "${{ steps.status.outputs.message }}"
          text: |
            **Repository**: ${{ github.repository }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Build**: ${{ github.run_number }}
            **Trigger**: ${{ github.event_name }}
            
            ### Test Results:
            - **Smoke Tests**: ${{ needs.smoke-tests.result }}
            - **Regression Tests**: ${{ needs.regression-tests.result }}
            - **Performance Tests**: ${{ needs.performance-tests.result }}
            
            [📊 View Detailed Report](https://dmgithb.github.io/QA_BTL_Automation_Playwright/)
          theme_color: ${{ steps.status.outputs.status == 'success' && '28a745' || steps.status.outputs.status == 'warning' && 'ffc107' || 'dc3545' }}

  # 🧹 Cleanup
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [publish-reports, notify]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        run: |
          echo "🧹 Cleanup completed for build ${{ github.run_number }}"
          echo "Artifacts are automatically cleaned based on retention policies"
